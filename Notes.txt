BIND /CALL/ APPLY : THIS METHOD IS FOR OBJECTS
const fullName={
    firstname:"vikram",
    lastname:"mood",
    print:function(){
        firstname="ram";
        console.log(this.firstname+" "+this.lastname);
    }
}
fullName.print(); 
//output: vikram mood  


const fullName1={
    firstname:"vikram",
    lastname:"mood",
    print:function(){
        firstname="ram";
        console.log(firstname+" "+this.lastname);
    }
}
fullName1.print();
// output: ram mood;

CHECK DIFFERENCE , IN LINE 7 OF fullName WE USED THIS KEYWORD FOR FIRST NAME, BUT IN fullName1 WE NOT USED ;


CALL:

onst fullName={
    firstname:"vikram",
    lastname:"mood",
    print:function(place,age){
        firstname="ram";
        console.log(this.firstname+" "+this.lastname+" from "+place+" age:"+age);
    }
}
fullName.print("Hyderabad");
//output: vikram mood from Hyderabad age:undefined
const fullName1={
    firstname:"RAJA",
    lastname:"RAM",
   
}
fullName.print.call(fullName1,"Delhi","26"); //function borrow
// output: RAJA RAM from Delhi age:26

IN CALL METHOD, FIRST ARGUMENT IS REFERENCE TO A OBJECT, AND NEXT ARGUMENS ARE ANY PARAMETERS IN THE BORROWING FUNCTION.


APPLY: IT IS SAME AS CALL , BUT DIFFERENCE IS IN PASSING ARGUMENTS.
HERE FIRST ARGUMENT IS OBJECT REFERENCE,BUT NEXT ARGUMENTS ARE PASSED AS A SINGLE ARRAY.

fullName.print.apply(fullName1,["Delhi",26]); 
// output: RAJA RAM from Delhi age:26


BIND:
IS SAME AS CALL, BUT THE DIFFERENCE IS IT RETURNS A FUNCTION. TO EXECUTE THAT RETURNED FUNCTION , WE HAVE TO INVOKE/CALL THAT FUNCTION

let fun=fullName.print.bind(fullName1,"Delhi",26);
console.log(fun);
//output: Æ’ (place,age){
        firstname="ram";
        console.log(this.firstname+" "+this.lastname+" from "+place+" age:"+age);
    }

console.log(fun())
//output:RAJA RAM from Delhi age:26    

Note: Here 'this' in the print method's object points to the object we are passing as arguments in bind/call/apply methods. 


Profill of Bind method:

const name={
    firstname:"vikram",
    lastname:"mood",
}

let printName=function(hometown,state){
    // console.log(this);
    console.log(this.firstname+" "+ this.lastname+" "+ hometown+" "+state);
}
let printMyName=printName.bind(name,"haryana");
printMyName("Delhi");

///////////   Method 1:
Function.prototype.MyBind=function(scope,...args){ // args are arguments of bind function. And '...' represents any number of arguments
     let obj=this; /// here 'this' refer's to 'printName' in printName.MyBind(name)
        //  scope._this=this;           //scope is an object we sent. We are adding a new method with key=_this and value=printName function // remember method defination
    // console.log(obj);
     console.log(scope);
     console.log(args);
    // let params=args.slice(1);
    // console.log(params);
    return function(...args2){

         
        obj.apply(scope,[...args,...args2]) 
        
    }
}

////// Method 2;
Function.prototype.MyBind2=function(...args){
    let obj=this;
    let params=args.slice(1);
    return function(args2){
        obj.apply(args[0],[...params,...args2]);//args[0] is used since in MyBind(name) name is object reference is passed. we need to call that object,And that object is always first argument.
    }

}

let printMyName2=printName.MyBind(name,"haryana");
printMyName2("Delhi");


// ///// APPLY PROTOFILL

const name={
    firstName:"vikram",
    lastName:"mood",
}
function printMyName(hometown,state){
    console.log(this.firstName+" "+this.lastName+ " "+hometown+" "+state);
}

let app=printMyName.apply(name,["delhi","Telangana"]);


// //////// Method 1

Function.prototype.myApply=function(...args){

    let obj=this;
    console.log(obj);
    console.log(args);

     let params=args.slice(1)[0]; // here it is becoming nested arrary.
     console.log(params)
     return obj.call(args[0],...params);     

}
/////Method 2
Function.prototype.myApply2=function(scope,args){
    console.log(scope);
    console.log(args);
    scope._this=this;
    console.log(scope);

    scope._this(...args)

}

printMyName.myApply(name,["delhi","Telangana"]);

 printMyName.myApply2(name,["delhi","Telangana"]);



///// CALL BIND

const name={
    firstName:"Vikram",
    lastName:"mood",
}

let  printName=function(hometown,state){
    console.log(this.firstName+" "+this.lastName+" "+hometown+" "+state);

}

printName.call(name,"delhi","haryana");




Function.prototype.MyCall2=function(scope,...args){


    scope._this=this;
    
    scope._this(...args);
    
    
}

printName.MyCall2(name,"delhi","haryana");



///// DEBOUNCING FUNCTION

let counter=0;
function getData(){
    console.log("FEtching data: ",++counter);
}

const deBouncing=function(fn,delay){
    let timer;
    return function(){
        let context=this,args=arguments;
        
        clearTimeout(timer);
        
        timer=setTimeout(()=>{
          fn.apply(context,arguments);   
        },delay)

    }
}
let deBounce=deBouncing(getData,300);

///// Reduce function polyfill

let arr=[1,2,3,4];
let x=arr.reduce((acc,curr)=>{
    // console.log(acc);
    return acc=acc+curr;
},0);
console.log(x);
Array.prototype.myReduce=function(callbackfn,initValue){
    let prev= initValue!==undefined ?initValue:this[0];
    for(let i= initValue !==undefined ? 0:1;i<this.length;i++){
        prev=callbackfn(prev,arr[i],i,this);
    }
    return prev;

}
let fn= function(a,b,c,d){
    console.log("c:  "+c +" d: "+d);
    return a+b;
}


console.log(arr.myReduce(fn,0));